// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//go:build !wireinject
// +build !wireinject

package wechatcallback

import (
	"github.com/go-kit/log"
	"github.com/google/wire"
	"github.com/lingwei0604/kitty/app/entity"
	"github.com/lingwei0604/kitty/app/handlers"
	"github.com/lingwei0604/kitty/app/module"
	"github.com/lingwei0604/kitty/app/repository"
	"github.com/lingwei0604/kitty/pkg/contract"
	"github.com/lingwei0604/kitty/pkg/khttp"
	"github.com/lingwei0604/kitty/pkg/ots3"
)

// Injectors from wire.go:

func injectModule(reader contract.ConfigReader, logger log.Logger) (*Module, func(), error) {
	dialector, err := module.ProvideDialector(reader)
	if err != nil {
		return nil, nil, err
	}
	config := module.ProvideGormConfig(logger, reader)
	jaegerLogger := module.ProvideJaegerLogAdapter(logger)
	tracer, cleanup, err := module.ProvideOpentracing(jaegerLogger, reader)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := module.ProvideGormDB(dialector, config, tracer)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client := module.ProvideHttpClient(tracer)
	manager := module.ProvideUploadManager(tracer, reader, client)
	fileRepo := repository.NewFileRepo(manager, client)
	universalClient, cleanup3 := module.ProvideRedis(logger, reader, tracer)
	uniqueID := repository.NewUniqueID(universalClient, reader)
	userRepo := repository.NewUserRepo(db, fileRepo, uniqueID)
	handler := NewHandler(userRepo, logger)
	wechatcallbackModule := &Module{
		Handler: handler,
	}
	return wechatcallbackModule, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WechatServerSet = wire.NewSet(
	NewHandler, module.DbSet, module.OpenTracingSet, module.NameAndEnvSet, module.ProvideHttpClient, module.ProvideUploadManager, module.ProvideDispatcher, module.ProvideRedis, module.ProvideKafkaFactory, repository.NewUserRepo, repository.NewCodeRepo, repository.NewFileRepo, repository.NewExtraRepo, repository.NewUniqueID, handlers.NewAppService, handlers.ProvideAppServer, wire.Bind(new(contract.Uploader), new(*ots3.Manager)), wire.Bind(new(UserRepository), new(*repository.UserRepo)), wire.Bind(new(entity.IDAssigner), new(*repository.UniqueID)), wire.Bind(new(handlers.PreAllocator), new(*repository.UniqueID)), wire.Bind(new(contract.HttpDoer), new(*khttp.Client)), wire.Struct(new(Module), "Handler"),
)
