// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/lingwei0604/kitty/app/repository"
)

// UserCache is an autogenerated mock type for the UserCache type
type UserCache struct {
	mock.Mock
}

// CacheBindAd provides a mock function with given fields: ctx, cb
func (_m *UserCache) CacheBindAd(ctx context.Context, cb *repository.BindAdCallback) error {
	ret := _m.Called(ctx, cb)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.BindAdCallback) error); ok {
		r0 = rf(ctx, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheID provides a mock function with given fields: ctx, id
func (_m *UserCache) CacheID(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBindAd provides a mock function with given fields: ctx, id
func (_m *UserCache) GetBindAd(ctx context.Context, id uint) (*repository.BindAdCallback, error) {
	ret := _m.Called(ctx, id)

	var r0 *repository.BindAdCallback
	if rf, ok := ret.Get(0).(func(context.Context, uint) *repository.BindAdCallback); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.BindAdCallback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
