// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "git.yingzhongshare.com/mkt/kitty/app/entity"

	mock "github.com/stretchr/testify/mock"
)

// PreAllocator is an autogenerated mock type for the PreAllocator type
type PreAllocator struct {
	mock.Mock
}

// ClearPreallocate provides a mock function with given fields: ctx, packageName, suuid
func (_m *PreAllocator) ClearPreallocate(ctx context.Context, packageName string, suuid string) error {
	ret := _m.Called(ctx, packageName, suuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, packageName, suuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCacheByDevice provides a mock function with given fields: ctx, packageName, device
func (_m *PreAllocator) DeleteCacheByDevice(ctx context.Context, packageName string, device *entity.Device) {
	_m.Called(ctx, packageName, device)
}

// GetIDByDevice provides a mock function with given fields: ctx, packageName, device
func (_m *PreAllocator) GetIDByDevice(ctx context.Context, packageName string, device *entity.Device) (uint, error) {
	ret := _m.Called(ctx, packageName, device)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.Device) uint); ok {
		r0 = rf(ctx, packageName, device)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *entity.Device) error); ok {
		r1 = rf(ctx, packageName, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisterTimeById provides a mock function with given fields: ctx, ID
func (_m *PreAllocator) GetRegisterTimeById(ctx context.Context, ID uint) (int64, error) {
	ret := _m.Called(ctx, ID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uint) int64); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Preallocate provides a mock function with given fields: ctx, packageName, suuid
func (_m *PreAllocator) Preallocate(ctx context.Context, packageName string, suuid string) (uint, error) {
	ret := _m.Called(ctx, packageName, suuid)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uint); ok {
		r0 = rf(ctx, packageName, suuid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, packageName, suuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIDByDevice provides a mock function with given fields: ctx, packageName, device, ID
func (_m *PreAllocator) SetIDByDevice(ctx context.Context, packageName string, device *entity.Device, ID uint) error {
	ret := _m.Called(ctx, packageName, device, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.Device, uint) error); ok {
		r0 = rf(ctx, packageName, device, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRegisterTimeById provides a mock function with given fields: ctx, ID, registerTime
func (_m *PreAllocator) SetRegisterTimeById(ctx context.Context, ID uint, registerTime int64) error {
	ret := _m.Called(ctx, ID, registerTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, int64) error); ok {
		r0 = rf(ctx, ID, registerTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
