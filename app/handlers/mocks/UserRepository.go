// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	clause "gorm.io/gorm/clause"

	entity "github.com/lingwei0604/kitty/app/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, where
func (_m *UserRepository) Count(ctx context.Context, where ...clause.Expression) (int64, error) {
	_va := make([]interface{}, len(where))
	for _i := range where {
		_va[_i] = where[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, ...clause.Expression) int64); ok {
		r0 = rf(ctx, where...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...clause.Expression) error); ok {
		r1 = rf(ctx, where...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevices provides a mock function with given fields: ctx, uid
func (_m *UserRepository) DeleteDevices(ctx context.Context, uid uint) ([]entity.Device, error) {
	ret := _m.Called(ctx, uid)

	var r0 []entity.Device
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entity.Device); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevicesByAndroid provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) DeleteDevicesByAndroid(_a0 context.Context, _a1 string) ([]entity.Device, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Device); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevicesByIdfa provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) DeleteDevicesByIdfa(_a0 context.Context, _a1 string) ([]entity.Device, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Device); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevicesByOaid provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) DeleteDevicesByOaid(_a0 context.Context, _a1 string) ([]entity.Device, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Device); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id uint) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, where
func (_m *UserRepository) GetAll(ctx context.Context, where ...clause.Expression) ([]entity.User, error) {
	_va := make([]interface{}, len(where))
	for _i := range where {
		_va[_i] = where[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, ...clause.Expression) []entity.User); ok {
		r0 = rf(ctx, where...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...clause.Expression) error); ok {
		r1 = rf(ctx, where...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDevice provides a mock function with given fields: ctx, packageName, device
func (_m *UserRepository) GetByDevice(ctx context.Context, packageName string, device entity.Device) ([]entity.User, error) {
	ret := _m.Called(ctx, packageName, device)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Device) []entity.User); ok {
		r0 = rf(ctx, packageName, device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Device) error); ok {
		r1 = rf(ctx, packageName, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromDevice provides a mock function with given fields: ctx, packageName, suuid, device
func (_m *UserRepository) GetFromDevice(ctx context.Context, packageName string, suuid string, device *entity.Device) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, suuid, device)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entity.Device) *entity.User); ok {
		r0 = rf(ctx, packageName, suuid, device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *entity.Device) error); ok {
		r1 = rf(ctx, packageName, suuid, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromMobile provides a mock function with given fields: ctx, packageName, mobile, device
func (_m *UserRepository) GetFromMobile(ctx context.Context, packageName string, mobile string, device *entity.Device) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, mobile, device)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entity.Device) *entity.User); ok {
		r0 = rf(ctx, packageName, mobile, device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *entity.Device) error); ok {
		r1 = rf(ctx, packageName, mobile, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromWechat provides a mock function with given fields: ctx, packageName, wechat, device, wechatUser
func (_m *UserRepository) GetFromWechat(ctx context.Context, packageName string, wechat string, device *entity.Device, wechatUser entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, wechat, device, wechatUser)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entity.Device, entity.User) *entity.User); ok {
		r0 = rf(ctx, packageName, wechat, device, wechatUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *entity.Device, entity.User) error); ok {
		r1 = rf(ctx, packageName, wechat, device, wechatUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDAndCreatedAtBySUUID provides a mock function with given fields: ctx, packageName, suuid
func (_m *UserRepository) GetIDAndCreatedAtBySUUID(ctx context.Context, packageName string, suuid string) (uint, time.Time, error) {
	ret := _m.Called(ctx, packageName, suuid)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uint); ok {
		r0 = rf(ctx, packageName, suuid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, string, string) time.Time); ok {
		r1 = rf(ctx, packageName, suuid)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, packageName, suuid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecentUserByDevice provides a mock function with given fields: ctx, packageName, device
func (_m *UserRepository) GetRecentUserByDevice(ctx context.Context, packageName string, device *entity.Device) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, device)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.Device) *entity.User); ok {
		r0 = rf(ctx, packageName, device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *entity.Device) error); ok {
		r1 = rf(ctx, packageName, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserRepository) Save(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, user
func (_m *UserRepository) Update(ctx context.Context, id uint, user entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, id, user)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.User) *entity.User); ok {
		r0 = rf(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, entity.User) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *UserRepository) GetByWechat(ctx context.Context, packageName, wechat string) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, wechat)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.User); ok {
		r0 = rf(ctx, packageName, wechat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, packageName, wechat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
