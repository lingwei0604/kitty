// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 0035b7fc88
// Version Date: 2022-11-02T08:53:09Z

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/endpoint"

	pb "git.yingzhongshare.com/mkt/kitty/proto"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	PreRegisterEndpoint  endpoint.Endpoint
	LoginEndpoint        endpoint.Endpoint
	BindWechatEndpoint   endpoint.Endpoint
	GetCodeEndpoint      endpoint.Endpoint
	GetInfoEndpoint      endpoint.Endpoint
	GetInfoBatchEndpoint endpoint.Endpoint
	UpdateInfoEndpoint   endpoint.Endpoint
	BindEndpoint         endpoint.Endpoint
	BindAdEndpoint       endpoint.Endpoint
	UnbindEndpoint       endpoint.Endpoint
	RefreshEndpoint      endpoint.Endpoint
	SoftDeleteEndpoint   endpoint.Endpoint
	DeviceLookupEndpoint endpoint.Endpoint
}

func NewEndpoints(service pb.AppServer) Endpoints {

	// Endpoint domain.
	var (
		preregisterEndpoint  = MakePreRegisterEndpoint(service)
		loginEndpoint        = MakeLoginEndpoint(service)
		bindwechatEndpoint   = MakeBindWechatEndpoint(service)
		getcodeEndpoint      = MakeGetCodeEndpoint(service)
		getinfoEndpoint      = MakeGetInfoEndpoint(service)
		getinfobatchEndpoint = MakeGetInfoBatchEndpoint(service)
		updateinfoEndpoint   = MakeUpdateInfoEndpoint(service)
		bindEndpoint         = MakeBindEndpoint(service)
		bindadEndpoint       = MakeBindAdEndpoint(service)
		unbindEndpoint       = MakeUnbindEndpoint(service)
		refreshEndpoint      = MakeRefreshEndpoint(service)
		softdeleteEndpoint   = MakeSoftDeleteEndpoint(service)
		devicelookupEndpoint = MakeDeviceLookupEndpoint(service)
	)

	endpoints := Endpoints{
		PreRegisterEndpoint:  preregisterEndpoint,
		LoginEndpoint:        loginEndpoint,
		BindWechatEndpoint:   bindwechatEndpoint,
		GetCodeEndpoint:      getcodeEndpoint,
		GetInfoEndpoint:      getinfoEndpoint,
		GetInfoBatchEndpoint: getinfobatchEndpoint,
		UpdateInfoEndpoint:   updateinfoEndpoint,
		BindEndpoint:         bindEndpoint,
		BindAdEndpoint:       bindadEndpoint,
		UnbindEndpoint:       unbindEndpoint,
		RefreshEndpoint:      refreshEndpoint,
		SoftDeleteEndpoint:   softdeleteEndpoint,
		DeviceLookupEndpoint: devicelookupEndpoint,
	}

	return endpoints
}

// Endpoints

func (e Endpoints) PreRegister(ctx context.Context, in *pb.PreRegisterRequest) (*pb.PreRegisterReply, error) {
	response, err := e.PreRegisterEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.PreRegisterReply), nil
}

func (e Endpoints) Login(ctx context.Context, in *pb.UserLoginRequest) (*pb.UserInfoReply, error) {
	response, err := e.LoginEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) BindWechat(ctx context.Context, in *pb.BindWechatRequest) (*pb.UserInfoReply, error) {
	response, err := e.BindWechatEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) GetCode(ctx context.Context, in *pb.GetCodeRequest) (*pb.GenericReply, error) {
	response, err := e.GetCodeEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GenericReply), nil
}

func (e Endpoints) GetInfo(ctx context.Context, in *pb.UserInfoRequest) (*pb.UserInfoReply, error) {
	response, err := e.GetInfoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) GetInfoBatch(ctx context.Context, in *pb.UserInfoBatchRequest) (*pb.UserInfoBatchReply, error) {
	response, err := e.GetInfoBatchEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoBatchReply), nil
}

func (e Endpoints) UpdateInfo(ctx context.Context, in *pb.UserInfoUpdateRequest) (*pb.UserInfoReply, error) {
	response, err := e.UpdateInfoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) Bind(ctx context.Context, in *pb.UserBindRequest) (*pb.UserInfoReply, error) {
	response, err := e.BindEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) BindAd(ctx context.Context, in *pb.UserBindAdRequest) (*pb.GenericReply, error) {
	response, err := e.BindAdEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GenericReply), nil
}

func (e Endpoints) Unbind(ctx context.Context, in *pb.UserUnbindRequest) (*pb.UserInfoReply, error) {
	response, err := e.UnbindEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) Refresh(ctx context.Context, in *pb.UserRefreshRequest) (*pb.UserInfoReply, error) {
	response, err := e.RefreshEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) SoftDelete(ctx context.Context, in *pb.UserSoftDeleteRequest) (*pb.UserInfoReply, error) {
	response, err := e.SoftDeleteEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) DeviceLookup(ctx context.Context, in *pb.DeviceLookupRequest) (*pb.DeviceLookupReply, error) {
	response, err := e.DeviceLookupEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.DeviceLookupReply), nil
}

// Make Endpoints

func MakePreRegisterEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.PreRegisterRequest)
		v, err := s.PreRegister(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeLoginEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserLoginRequest)
		v, err := s.Login(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeBindWechatEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.BindWechatRequest)
		v, err := s.BindWechat(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetCodeEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetCodeRequest)
		v, err := s.GetCode(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetInfoEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserInfoRequest)
		v, err := s.GetInfo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetInfoBatchEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserInfoBatchRequest)
		v, err := s.GetInfoBatch(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeUpdateInfoEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserInfoUpdateRequest)
		v, err := s.UpdateInfo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeBindEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserBindRequest)
		v, err := s.Bind(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeBindAdEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserBindAdRequest)
		v, err := s.BindAd(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeUnbindEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserUnbindRequest)
		v, err := s.Unbind(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeRefreshEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserRefreshRequest)
		v, err := s.Refresh(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeSoftDeleteEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserSoftDeleteRequest)
		v, err := s.SoftDelete(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeDeviceLookupEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.DeviceLookupRequest)
		v, err := s.DeviceLookup(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"PreRegister":  {},
		"Login":        {},
		"BindWechat":   {},
		"GetCode":      {},
		"GetInfo":      {},
		"GetInfoBatch": {},
		"UpdateInfo":   {},
		"Bind":         {},
		"BindAd":       {},
		"Unbind":       {},
		"Refresh":      {},
		"SoftDelete":   {},
		"DeviceLookup": {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "PreRegister" {
			e.PreRegisterEndpoint = middleware(e.PreRegisterEndpoint)
		}
		if inc == "Login" {
			e.LoginEndpoint = middleware(e.LoginEndpoint)
		}
		if inc == "BindWechat" {
			e.BindWechatEndpoint = middleware(e.BindWechatEndpoint)
		}
		if inc == "GetCode" {
			e.GetCodeEndpoint = middleware(e.GetCodeEndpoint)
		}
		if inc == "GetInfo" {
			e.GetInfoEndpoint = middleware(e.GetInfoEndpoint)
		}
		if inc == "GetInfoBatch" {
			e.GetInfoBatchEndpoint = middleware(e.GetInfoBatchEndpoint)
		}
		if inc == "UpdateInfo" {
			e.UpdateInfoEndpoint = middleware(e.UpdateInfoEndpoint)
		}
		if inc == "Bind" {
			e.BindEndpoint = middleware(e.BindEndpoint)
		}
		if inc == "BindAd" {
			e.BindAdEndpoint = middleware(e.BindAdEndpoint)
		}
		if inc == "Unbind" {
			e.UnbindEndpoint = middleware(e.UnbindEndpoint)
		}
		if inc == "Refresh" {
			e.RefreshEndpoint = middleware(e.RefreshEndpoint)
		}
		if inc == "SoftDelete" {
			e.SoftDeleteEndpoint = middleware(e.SoftDeleteEndpoint)
		}
		if inc == "DeviceLookup" {
			e.DeviceLookupEndpoint = middleware(e.DeviceLookupEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"PreRegister":  {},
		"Login":        {},
		"BindWechat":   {},
		"GetCode":      {},
		"GetInfo":      {},
		"GetInfoBatch": {},
		"UpdateInfo":   {},
		"Bind":         {},
		"BindAd":       {},
		"Unbind":       {},
		"Refresh":      {},
		"SoftDelete":   {},
		"DeviceLookup": {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "PreRegister" {
			e.PreRegisterEndpoint = middleware("PreRegister", e.PreRegisterEndpoint)
		}
		if inc == "Login" {
			e.LoginEndpoint = middleware("Login", e.LoginEndpoint)
		}
		if inc == "BindWechat" {
			e.BindWechatEndpoint = middleware("BindWechat", e.BindWechatEndpoint)
		}
		if inc == "GetCode" {
			e.GetCodeEndpoint = middleware("GetCode", e.GetCodeEndpoint)
		}
		if inc == "GetInfo" {
			e.GetInfoEndpoint = middleware("GetInfo", e.GetInfoEndpoint)
		}
		if inc == "GetInfoBatch" {
			e.GetInfoBatchEndpoint = middleware("GetInfoBatch", e.GetInfoBatchEndpoint)
		}
		if inc == "UpdateInfo" {
			e.UpdateInfoEndpoint = middleware("UpdateInfo", e.UpdateInfoEndpoint)
		}
		if inc == "Bind" {
			e.BindEndpoint = middleware("Bind", e.BindEndpoint)
		}
		if inc == "BindAd" {
			e.BindAdEndpoint = middleware("BindAd", e.BindAdEndpoint)
		}
		if inc == "Unbind" {
			e.UnbindEndpoint = middleware("Unbind", e.UnbindEndpoint)
		}
		if inc == "Refresh" {
			e.RefreshEndpoint = middleware("Refresh", e.RefreshEndpoint)
		}
		if inc == "SoftDelete" {
			e.SoftDeleteEndpoint = middleware("SoftDelete", e.SoftDeleteEndpoint)
		}
		if inc == "DeviceLookup" {
			e.DeviceLookupEndpoint = middleware("DeviceLookup", e.DeviceLookupEndpoint)
		}
	}
}
