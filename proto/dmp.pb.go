// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dmp.proto

package kitty

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DmpResp_BlackType int32

const (
	DmpResp_WHITE DmpResp_BlackType = 0
	DmpResp_BLACK DmpResp_BlackType = 1
)

var DmpResp_BlackType_name = map[int32]string{
	0: "WHITE",
	1: "BLACK",
}

var DmpResp_BlackType_value = map[string]int32{
	"WHITE": 0,
	"BLACK": 1,
}

func (x DmpResp_BlackType) String() string {
	return proto.EnumName(DmpResp_BlackType_name, int32(x))
}

func (DmpResp_BlackType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f01b3234c0496b5e, []int{1, 0}
}

type SkyNet_RiskLevel int32

const (
	SkyNet_RiskLevelUnknown SkyNet_RiskLevel = 0
	SkyNet_RiskLevelPass    SkyNet_RiskLevel = 1
	SkyNet_RiskLevelReview  SkyNet_RiskLevel = 2
	SkyNet_RiskLevelReject  SkyNet_RiskLevel = 3
)

var SkyNet_RiskLevel_name = map[int32]string{
	0: "RiskLevelUnknown",
	1: "RiskLevelPass",
	2: "RiskLevelReview",
	3: "RiskLevelReject",
}

var SkyNet_RiskLevel_value = map[string]int32{
	"RiskLevelUnknown": 0,
	"RiskLevelPass":    1,
	"RiskLevelReview":  2,
	"RiskLevelReject":  3,
}

func (x SkyNet_RiskLevel) String() string {
	return proto.EnumName(SkyNet_RiskLevel_name, int32(x))
}

func (SkyNet_RiskLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f01b3234c0496b5e, []int{2, 0}
}

type DmpReq struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PackageName          string   `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Suuid                string   `protobuf:"bytes,3,opt,name=suuid,proto3" json:"suuid,omitempty"`
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DmpReq) Reset()         { *m = DmpReq{} }
func (m *DmpReq) String() string { return proto.CompactTextString(m) }
func (*DmpReq) ProtoMessage()    {}
func (*DmpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f01b3234c0496b5e, []int{0}
}
func (m *DmpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DmpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmpReq.Merge(m, src)
}
func (m *DmpReq) XXX_Size() int {
	return m.Size()
}
func (m *DmpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DmpReq.DiscardUnknown(m)
}

var xxx_messageInfo_DmpReq proto.InternalMessageInfo

func (m *DmpReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DmpReq) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *DmpReq) GetSuuid() string {
	if m != nil {
		return m.Suuid
	}
	return ""
}

func (m *DmpReq) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type DmpResp struct {
	AdClick                     uint64            `protobuf:"varint,1,opt,name=ad_click,json=adClick,proto3" json:"ad_click,omitempty"`
	AdComplete                  uint64            `protobuf:"varint,2,opt,name=ad_complete,json=adComplete,proto3" json:"ad_complete,omitempty"`
	AdDisplay                   uint64            `protobuf:"varint,3,opt,name=ad_display,json=adDisplay,proto3" json:"ad_display,omitempty"`
	AdCtrDev                    float32           `protobuf:"fixed32,4,opt,name=ad_ctr_dev,json=adCtrDev,proto3" json:"ad_ctr_dev,omitempty"`
	Register                    string            `protobuf:"bytes,5,opt,name=register,proto3" json:"register,omitempty"`
	Score                       int64             `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	ScoreTotal                  int64             `protobuf:"varint,7,opt,name=score_total,json=scoreTotal,proto3" json:"score_total,omitempty"`
	BlackType                   DmpResp_BlackType `protobuf:"varint,8,opt,name=black_type,json=blackType,proto3,enum=pb.DmpResp_BlackType" json:"black_type,omitempty"`
	Ext                         string            `protobuf:"bytes,9,opt,name=ext,proto3" json:"ext,omitempty"`
	Skynet                      *SkyNet           `protobuf:"bytes,10,opt,name=skynet,proto3" json:"skynet,omitempty"`
	AdSplashImp                 uint64            `protobuf:"varint,11,opt,name=ad_splash_imp,json=adSplashImp,proto3" json:"ad_splash_imp,omitempty"`
	AdFeedImp                   uint64            `protobuf:"varint,12,opt,name=ad_feed_imp,json=adFeedImp,proto3" json:"ad_feed_imp,omitempty"`
	AdBannerImp                 uint64            `protobuf:"varint,13,opt,name=ad_banner_imp,json=adBannerImp,proto3" json:"ad_banner_imp,omitempty"`
	AdInterstitialImp           uint64            `protobuf:"varint,14,opt,name=ad_interstitial_imp,json=adInterstitialImp,proto3" json:"ad_interstitial_imp,omitempty"`
	AdRewardedVideoImp          uint64            `protobuf:"varint,15,opt,name=ad_rewarded_video_imp,json=adRewardedVideoImp,proto3" json:"ad_rewarded_video_imp,omitempty"`
	AdFullScreenVideoImp        uint64            `protobuf:"varint,16,opt,name=ad_full_screen_video_imp,json=adFullScreenVideoImp,proto3" json:"ad_full_screen_video_imp,omitempty"`
	AdDrawImp                   uint64            `protobuf:"varint,17,opt,name=ad_draw_imp,json=adDrawImp,proto3" json:"ad_draw_imp,omitempty"`
	AdInterstitialFullScreenImp uint64            `protobuf:"varint,18,opt,name=ad_interstitial_full_screen_imp,json=adInterstitialFullScreenImp,proto3" json:"ad_interstitial_full_screen_imp,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}          `json:"-"`
	XXX_unrecognized            []byte            `json:"-"`
	XXX_sizecache               int32             `json:"-"`
}

func (m *DmpResp) Reset()         { *m = DmpResp{} }
func (m *DmpResp) String() string { return proto.CompactTextString(m) }
func (*DmpResp) ProtoMessage()    {}
func (*DmpResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f01b3234c0496b5e, []int{1}
}
func (m *DmpResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmpResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmpResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DmpResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmpResp.Merge(m, src)
}
func (m *DmpResp) XXX_Size() int {
	return m.Size()
}
func (m *DmpResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DmpResp.DiscardUnknown(m)
}

var xxx_messageInfo_DmpResp proto.InternalMessageInfo

func (m *DmpResp) GetAdClick() uint64 {
	if m != nil {
		return m.AdClick
	}
	return 0
}

func (m *DmpResp) GetAdComplete() uint64 {
	if m != nil {
		return m.AdComplete
	}
	return 0
}

func (m *DmpResp) GetAdDisplay() uint64 {
	if m != nil {
		return m.AdDisplay
	}
	return 0
}

func (m *DmpResp) GetAdCtrDev() float32 {
	if m != nil {
		return m.AdCtrDev
	}
	return 0
}

func (m *DmpResp) GetRegister() string {
	if m != nil {
		return m.Register
	}
	return ""
}

func (m *DmpResp) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *DmpResp) GetScoreTotal() int64 {
	if m != nil {
		return m.ScoreTotal
	}
	return 0
}

func (m *DmpResp) GetBlackType() DmpResp_BlackType {
	if m != nil {
		return m.BlackType
	}
	return DmpResp_WHITE
}

func (m *DmpResp) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *DmpResp) GetSkynet() *SkyNet {
	if m != nil {
		return m.Skynet
	}
	return nil
}

func (m *DmpResp) GetAdSplashImp() uint64 {
	if m != nil {
		return m.AdSplashImp
	}
	return 0
}

func (m *DmpResp) GetAdFeedImp() uint64 {
	if m != nil {
		return m.AdFeedImp
	}
	return 0
}

func (m *DmpResp) GetAdBannerImp() uint64 {
	if m != nil {
		return m.AdBannerImp
	}
	return 0
}

func (m *DmpResp) GetAdInterstitialImp() uint64 {
	if m != nil {
		return m.AdInterstitialImp
	}
	return 0
}

func (m *DmpResp) GetAdRewardedVideoImp() uint64 {
	if m != nil {
		return m.AdRewardedVideoImp
	}
	return 0
}

func (m *DmpResp) GetAdFullScreenVideoImp() uint64 {
	if m != nil {
		return m.AdFullScreenVideoImp
	}
	return 0
}

func (m *DmpResp) GetAdDrawImp() uint64 {
	if m != nil {
		return m.AdDrawImp
	}
	return 0
}

func (m *DmpResp) GetAdInterstitialFullScreenImp() uint64 {
	if m != nil {
		return m.AdInterstitialFullScreenImp
	}
	return 0
}

type SkyNet struct {
	Register             SkyNet_RiskLevel `protobuf:"varint,1,opt,name=register,proto3,enum=pb.SkyNet_RiskLevel" json:"register,omitempty"`
	Login                SkyNet_RiskLevel `protobuf:"varint,2,opt,name=login,proto3,enum=pb.SkyNet_RiskLevel" json:"login,omitempty"`
	Fission              SkyNet_RiskLevel `protobuf:"varint,3,opt,name=fission,proto3,enum=pb.SkyNet_RiskLevel" json:"fission,omitempty"`
	Browse               SkyNet_RiskLevel `protobuf:"varint,4,opt,name=browse,proto3,enum=pb.SkyNet_RiskLevel" json:"browse,omitempty"`
	Task                 SkyNet_RiskLevel `protobuf:"varint,5,opt,name=task,proto3,enum=pb.SkyNet_RiskLevel" json:"task,omitempty"`
	Withdraw             SkyNet_RiskLevel `protobuf:"varint,6,opt,name=withdraw,proto3,enum=pb.SkyNet_RiskLevel" json:"withdraw,omitempty"`
	Level                SkyNet_RiskLevel `protobuf:"varint,7,opt,name=level,proto3,enum=pb.SkyNet_RiskLevel" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SkyNet) Reset()         { *m = SkyNet{} }
func (m *SkyNet) String() string { return proto.CompactTextString(m) }
func (*SkyNet) ProtoMessage()    {}
func (*SkyNet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f01b3234c0496b5e, []int{2}
}
func (m *SkyNet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkyNet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkyNet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkyNet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkyNet.Merge(m, src)
}
func (m *SkyNet) XXX_Size() int {
	return m.Size()
}
func (m *SkyNet) XXX_DiscardUnknown() {
	xxx_messageInfo_SkyNet.DiscardUnknown(m)
}

var xxx_messageInfo_SkyNet proto.InternalMessageInfo

func (m *SkyNet) GetRegister() SkyNet_RiskLevel {
	if m != nil {
		return m.Register
	}
	return SkyNet_RiskLevelUnknown
}

func (m *SkyNet) GetLogin() SkyNet_RiskLevel {
	if m != nil {
		return m.Login
	}
	return SkyNet_RiskLevelUnknown
}

func (m *SkyNet) GetFission() SkyNet_RiskLevel {
	if m != nil {
		return m.Fission
	}
	return SkyNet_RiskLevelUnknown
}

func (m *SkyNet) GetBrowse() SkyNet_RiskLevel {
	if m != nil {
		return m.Browse
	}
	return SkyNet_RiskLevelUnknown
}

func (m *SkyNet) GetTask() SkyNet_RiskLevel {
	if m != nil {
		return m.Task
	}
	return SkyNet_RiskLevelUnknown
}

func (m *SkyNet) GetWithdraw() SkyNet_RiskLevel {
	if m != nil {
		return m.Withdraw
	}
	return SkyNet_RiskLevelUnknown
}

func (m *SkyNet) GetLevel() SkyNet_RiskLevel {
	if m != nil {
		return m.Level
	}
	return SkyNet_RiskLevelUnknown
}

func init() {
	proto.RegisterEnum("pb.DmpResp_BlackType", DmpResp_BlackType_name, DmpResp_BlackType_value)
	proto.RegisterEnum("pb.SkyNet_RiskLevel", SkyNet_RiskLevel_name, SkyNet_RiskLevel_value)
	proto.RegisterType((*DmpReq)(nil), "pb.DmpReq")
	proto.RegisterType((*DmpResp)(nil), "pb.DmpResp")
	proto.RegisterType((*SkyNet)(nil), "pb.SkyNet")
}

func init() { proto.RegisterFile("dmp.proto", fileDescriptor_f01b3234c0496b5e) }

var fileDescriptor_f01b3234c0496b5e = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0xde, 0xf1, 0xbf, 0xcb, 0xd9, 0xec, 0x6c, 0x67, 0x23, 0x86, 0x25, 0x38, 0xce, 0x9c, 0x4c,
	0x84, 0xc6, 0xb0, 0x44, 0x1c, 0xd8, 0x13, 0xbb, 0x26, 0xc2, 0x22, 0x44, 0x68, 0x76, 0x03, 0x12,
	0x07, 0x46, 0xed, 0xe9, 0x8a, 0xb7, 0x99, 0xbf, 0xce, 0x74, 0xdb, 0xc6, 0x57, 0x5e, 0x81, 0x0b,
	0x0f, 0xc1, 0x83, 0x70, 0x41, 0x42, 0xe2, 0x05, 0xd0, 0xc2, 0x83, 0xa0, 0xae, 0xb1, 0xbd, 0x26,
	0x92, 0x4f, 0xee, 0xfa, 0xbe, 0xaf, 0xba, 0xea, 0x9b, 0xae, 0x32, 0x74, 0x45, 0xa6, 0x02, 0x55,
	0x16, 0xa6, 0x60, 0x35, 0x35, 0x3d, 0x7d, 0x34, 0x2b, 0x8a, 0x59, 0x8a, 0x23, 0xae, 0xe4, 0x88,
	0xe7, 0x79, 0x61, 0xb8, 0x91, 0x45, 0xae, 0x2b, 0x85, 0x6f, 0xa0, 0x35, 0xce, 0x54, 0x88, 0x6f,
	0xd8, 0x3b, 0xd0, 0x9e, 0x6b, 0x2c, 0x23, 0x29, 0x3c, 0x67, 0xe0, 0x0c, 0x1b, 0x61, 0xcb, 0x86,
	0x13, 0xc1, 0x9e, 0xc0, 0x3d, 0xc5, 0xe3, 0x84, 0xcf, 0x30, 0xca, 0x79, 0x86, 0x5e, 0x6d, 0xe0,
	0x0c, 0xbb, 0x61, 0x6f, 0x8d, 0xbd, 0xe4, 0x19, 0xb2, 0x13, 0x68, 0xea, 0xf9, 0x5c, 0x0a, 0xaf,
	0x4e, 0x5c, 0x15, 0x30, 0x0f, 0xda, 0xf1, 0x0d, 0xcf, 0x73, 0x4c, 0xbd, 0x06, 0xe1, 0x9b, 0xd0,
	0xff, 0xa3, 0x09, 0x6d, 0x2a, 0xab, 0x15, 0x7b, 0x17, 0x3a, 0x5c, 0x44, 0x71, 0x2a, 0xe3, 0x64,
	0x5d, 0xb8, 0xcd, 0xc5, 0xa5, 0x0d, 0xd9, 0x63, 0xe8, 0x59, 0xaa, 0xc8, 0x54, 0x8a, 0xa6, 0x2a,
	0xdc, 0x08, 0x81, 0x8b, 0xcb, 0x35, 0xc2, 0xde, 0x07, 0xe0, 0x22, 0x12, 0x52, 0xab, 0x94, 0xaf,
	0xa8, 0x78, 0x23, 0xec, 0x72, 0x31, 0xae, 0x00, 0xf6, 0x88, 0xe8, 0xd8, 0x94, 0x91, 0xc0, 0x05,
	0xf5, 0x50, 0x0b, 0x3b, 0x5c, 0x5c, 0x9a, 0x72, 0x8c, 0x0b, 0x76, 0x0a, 0x9d, 0x12, 0x67, 0x52,
	0x1b, 0x2c, 0xbd, 0x26, 0xf5, 0xb7, 0x8d, 0xc9, 0x50, 0x5c, 0x94, 0xe8, 0xb5, 0x06, 0xce, 0xb0,
	0x1e, 0x56, 0x81, 0xed, 0x87, 0x0e, 0x91, 0x29, 0x0c, 0x4f, 0xbd, 0x36, 0x71, 0x40, 0xd0, 0xb5,
	0x45, 0xd8, 0x33, 0x80, 0x69, 0xca, 0xe3, 0x24, 0x32, 0x2b, 0x85, 0x5e, 0x67, 0xe0, 0x0c, 0xef,
	0x9f, 0x3d, 0x0c, 0xd4, 0x34, 0x58, 0x9b, 0x0d, 0x2e, 0x2c, 0x7b, 0xbd, 0x52, 0x18, 0x76, 0xa7,
	0x9b, 0x23, 0x73, 0xa1, 0x8e, 0x3f, 0x19, 0xaf, 0x4b, 0x3d, 0xd8, 0x23, 0xf3, 0xa1, 0xa5, 0x93,
	0x55, 0x8e, 0xc6, 0x83, 0x81, 0x33, 0xec, 0x9d, 0x81, 0xbd, 0xe3, 0x2a, 0x59, 0xbd, 0x44, 0x13,
	0xae, 0x19, 0xe6, 0xc3, 0x21, 0x17, 0x91, 0x35, 0xaa, 0x6f, 0x22, 0x99, 0x29, 0xaf, 0x47, 0xf6,
	0x7b, 0x5c, 0x5c, 0x11, 0x36, 0xc9, 0x14, 0xeb, 0xd3, 0x07, 0x7c, 0x8d, 0x28, 0x48, 0x71, 0x6f,
	0xf3, 0x81, 0x9e, 0x23, 0x0a, 0xcb, 0x57, 0x77, 0x4c, 0xed, 0xa3, 0x94, 0xa4, 0x38, 0xdc, 0xdc,
	0x71, 0x41, 0x98, 0xd5, 0x04, 0xf0, 0x80, 0x8b, 0x48, 0xe6, 0x06, 0x4b, 0x6d, 0xa4, 0x91, 0x3c,
	0x25, 0xe5, 0x7d, 0x52, 0x1e, 0x73, 0x31, 0xd9, 0x61, 0xac, 0xfe, 0x63, 0x78, 0xc8, 0x45, 0x54,
	0xe2, 0x92, 0x97, 0x02, 0x45, 0xb4, 0x90, 0x02, 0x0b, 0xca, 0x38, 0xa2, 0x0c, 0xc6, 0x45, 0xb8,
	0xe6, 0xbe, 0xb5, 0x94, 0x4d, 0xf9, 0x14, 0x3c, 0xdb, 0xe6, 0x3c, 0x4d, 0x23, 0x1d, 0x97, 0x88,
	0xf9, 0x4e, 0x96, 0x4b, 0x59, 0x27, 0x5c, 0x3c, 0x9f, 0xa7, 0xe9, 0x15, 0xb1, 0xdb, 0xbc, 0xca,
	0x9e, 0x28, 0xf9, 0x92, 0xa4, 0xc7, 0xdb, 0xf7, 0x2f, 0xf9, 0xd2, 0xf2, 0x63, 0x78, 0xfc, 0x76,
	0xeb, 0xbb, 0x45, 0x6c, 0x0e, 0xa3, 0x9c, 0xf7, 0xfe, 0x6f, 0xe3, 0xae, 0xd4, 0x24, 0x53, 0xfe,
	0x13, 0xe8, 0x6e, 0x9f, 0x8d, 0x75, 0xa1, 0xf9, 0xdd, 0x97, 0x93, 0xeb, 0x2f, 0xdc, 0x03, 0x7b,
	0xbc, 0x78, 0xf1, 0xf9, 0xe5, 0x57, 0xae, 0xe3, 0xff, 0x56, 0x87, 0x56, 0xf5, 0x3c, 0xec, 0xa3,
	0x9d, 0xa9, 0x72, 0x68, 0x00, 0x4e, 0xee, 0x1e, 0x2f, 0x08, 0xa5, 0x4e, 0x5e, 0xe0, 0x02, 0xd3,
	0x9d, 0x59, 0x7b, 0x0a, 0xcd, 0xb4, 0x98, 0xc9, 0x9c, 0xe6, 0x7b, 0x9f, 0xbc, 0x92, 0xb0, 0x00,
	0xda, 0xaf, 0xa5, 0xd6, 0xb2, 0xc8, 0x69, 0xda, 0xf7, 0xa9, 0x37, 0x22, 0xf6, 0x21, 0xb4, 0xa6,
	0x65, 0xb1, 0xd4, 0x48, 0xd3, 0xbf, 0x4f, 0xbe, 0xd6, 0xb0, 0x21, 0x34, 0x0c, 0xd7, 0x09, 0x6d,
	0xc3, 0x3e, 0x2d, 0x29, 0xac, 0xcb, 0xa5, 0x34, 0x37, 0xf6, 0xd3, 0xd3, 0x8a, 0xec, 0x75, 0xb9,
	0x51, 0x91, 0x4b, 0x0b, 0xd1, 0xd6, 0xec, 0x77, 0x69, 0x7f, 0xfc, 0x1f, 0xa0, 0xbb, 0xc5, 0xd8,
	0x09, 0xb8, 0xdb, 0xe0, 0x55, 0x9e, 0xe4, 0xc5, 0x32, 0x77, 0x0f, 0xd8, 0x31, 0x1c, 0x6e, 0xd1,
	0x6f, 0xb8, 0xd6, 0xae, 0xc3, 0x1e, 0xc0, 0xd1, 0xdd, 0x4d, 0xb8, 0x90, 0xb8, 0x74, 0x6b, 0x6f,
	0x81, 0x3f, 0x62, 0x6c, 0xdc, 0xfa, 0xd9, 0x39, 0xd4, 0xc7, 0x99, 0x62, 0xcf, 0xa0, 0xf3, 0x4a,
	0x63, 0xf9, 0xb5, 0x5d, 0x6d, 0xd8, 0x6e, 0xe9, 0x9b, 0xd3, 0xde, 0xce, 0xc6, 0xfa, 0x47, 0x3f,
	0xff, 0xf5, 0xef, 0x2f, 0xb5, 0xae, 0xdf, 0x18, 0x89, 0x4c, 0x7d, 0xe6, 0x3c, 0xbd, 0x38, 0xff,
	0xfd, 0xb6, 0xef, 0xfc, 0x79, 0xdb, 0x77, 0xfe, 0xbe, 0xed, 0x3b, 0xbf, 0xfe, 0xd3, 0x3f, 0xf8,
	0xfe, 0x83, 0x59, 0xca, 0xa7, 0x81, 0xe1, 0x33, 0x23, 0xe3, 0x20, 0xce, 0x47, 0x5c, 0x44, 0x33,
	0x2e, 0x73, 0x3d, 0x4a, 0xa4, 0x31, 0xab, 0x11, 0xfd, 0xd1, 0x9e, 0xd3, 0x79, 0xda, 0xa2, 0xe0,
	0x93, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x14, 0x1a, 0x16, 0xfc, 0xa4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DmpClient is the client API for Dmp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DmpClient interface {
	UserMore(ctx context.Context, in *DmpReq, opts ...grpc.CallOption) (*DmpResp, error)
}

type dmpClient struct {
	cc *grpc.ClientConn
}

func NewDmpClient(cc *grpc.ClientConn) DmpClient {
	return &dmpClient{cc}
}

func (c *dmpClient) UserMore(ctx context.Context, in *DmpReq, opts ...grpc.CallOption) (*DmpResp, error) {
	out := new(DmpResp)
	err := c.cc.Invoke(ctx, "/pb.Dmp/UserMore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DmpServer is the server API for Dmp service.
type DmpServer interface {
	UserMore(context.Context, *DmpReq) (*DmpResp, error)
}

// UnimplementedDmpServer can be embedded to have forward compatible implementations.
type UnimplementedDmpServer struct {
}

func (*UnimplementedDmpServer) UserMore(ctx context.Context, req *DmpReq) (*DmpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMore not implemented")
}

func RegisterDmpServer(s *grpc.Server, srv DmpServer) {
	s.RegisterService(&_Dmp_serviceDesc, srv)
}

func _Dmp_UserMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DmpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmpServer).UserMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dmp/UserMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmpServer).UserMore(ctx, req.(*DmpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dmp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Dmp",
	HandlerType: (*DmpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserMore",
			Handler:    _Dmp_UserMore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dmp.proto",
}

func (m *DmpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DmpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintDmp(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Suuid) > 0 {
		i -= len(m.Suuid)
		copy(dAtA[i:], m.Suuid)
		i = encodeVarintDmp(dAtA, i, uint64(len(m.Suuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PackageName) > 0 {
		i -= len(m.PackageName)
		copy(dAtA[i:], m.PackageName)
		i = encodeVarintDmp(dAtA, i, uint64(len(m.PackageName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DmpResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmpResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DmpResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdInterstitialFullScreenImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdInterstitialFullScreenImp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.AdDrawImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdDrawImp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdFullScreenVideoImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdFullScreenVideoImp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.AdRewardedVideoImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdRewardedVideoImp))
		i--
		dAtA[i] = 0x78
	}
	if m.AdInterstitialImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdInterstitialImp))
		i--
		dAtA[i] = 0x70
	}
	if m.AdBannerImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdBannerImp))
		i--
		dAtA[i] = 0x68
	}
	if m.AdFeedImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdFeedImp))
		i--
		dAtA[i] = 0x60
	}
	if m.AdSplashImp != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdSplashImp))
		i--
		dAtA[i] = 0x58
	}
	if m.Skynet != nil {
		{
			size, err := m.Skynet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintDmp(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BlackType != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.BlackType))
		i--
		dAtA[i] = 0x40
	}
	if m.ScoreTotal != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.ScoreTotal))
		i--
		dAtA[i] = 0x38
	}
	if m.Score != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Register) > 0 {
		i -= len(m.Register)
		copy(dAtA[i:], m.Register)
		i = encodeVarintDmp(dAtA, i, uint64(len(m.Register)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AdCtrDev != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AdCtrDev))))
		i--
		dAtA[i] = 0x25
	}
	if m.AdDisplay != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdDisplay))
		i--
		dAtA[i] = 0x18
	}
	if m.AdComplete != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdComplete))
		i--
		dAtA[i] = 0x10
	}
	if m.AdClick != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.AdClick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkyNet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkyNet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkyNet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if m.Withdraw != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Withdraw))
		i--
		dAtA[i] = 0x30
	}
	if m.Task != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Task))
		i--
		dAtA[i] = 0x28
	}
	if m.Browse != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Browse))
		i--
		dAtA[i] = 0x20
	}
	if m.Fission != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Fission))
		i--
		dAtA[i] = 0x18
	}
	if m.Login != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Login))
		i--
		dAtA[i] = 0x10
	}
	if m.Register != 0 {
		i = encodeVarintDmp(dAtA, i, uint64(m.Register))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovDmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DmpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDmp(uint64(m.UserId))
	}
	l = len(m.PackageName)
	if l > 0 {
		n += 1 + l + sovDmp(uint64(l))
	}
	l = len(m.Suuid)
	if l > 0 {
		n += 1 + l + sovDmp(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDmp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DmpResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdClick != 0 {
		n += 1 + sovDmp(uint64(m.AdClick))
	}
	if m.AdComplete != 0 {
		n += 1 + sovDmp(uint64(m.AdComplete))
	}
	if m.AdDisplay != 0 {
		n += 1 + sovDmp(uint64(m.AdDisplay))
	}
	if m.AdCtrDev != 0 {
		n += 5
	}
	l = len(m.Register)
	if l > 0 {
		n += 1 + l + sovDmp(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovDmp(uint64(m.Score))
	}
	if m.ScoreTotal != 0 {
		n += 1 + sovDmp(uint64(m.ScoreTotal))
	}
	if m.BlackType != 0 {
		n += 1 + sovDmp(uint64(m.BlackType))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovDmp(uint64(l))
	}
	if m.Skynet != nil {
		l = m.Skynet.Size()
		n += 1 + l + sovDmp(uint64(l))
	}
	if m.AdSplashImp != 0 {
		n += 1 + sovDmp(uint64(m.AdSplashImp))
	}
	if m.AdFeedImp != 0 {
		n += 1 + sovDmp(uint64(m.AdFeedImp))
	}
	if m.AdBannerImp != 0 {
		n += 1 + sovDmp(uint64(m.AdBannerImp))
	}
	if m.AdInterstitialImp != 0 {
		n += 1 + sovDmp(uint64(m.AdInterstitialImp))
	}
	if m.AdRewardedVideoImp != 0 {
		n += 1 + sovDmp(uint64(m.AdRewardedVideoImp))
	}
	if m.AdFullScreenVideoImp != 0 {
		n += 2 + sovDmp(uint64(m.AdFullScreenVideoImp))
	}
	if m.AdDrawImp != 0 {
		n += 2 + sovDmp(uint64(m.AdDrawImp))
	}
	if m.AdInterstitialFullScreenImp != 0 {
		n += 2 + sovDmp(uint64(m.AdInterstitialFullScreenImp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkyNet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Register != 0 {
		n += 1 + sovDmp(uint64(m.Register))
	}
	if m.Login != 0 {
		n += 1 + sovDmp(uint64(m.Login))
	}
	if m.Fission != 0 {
		n += 1 + sovDmp(uint64(m.Fission))
	}
	if m.Browse != 0 {
		n += 1 + sovDmp(uint64(m.Browse))
	}
	if m.Task != 0 {
		n += 1 + sovDmp(uint64(m.Task))
	}
	if m.Withdraw != 0 {
		n += 1 + sovDmp(uint64(m.Withdraw))
	}
	if m.Level != 0 {
		n += 1 + sovDmp(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDmp(x uint64) (n int) {
	return sovDmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DmpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmpResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmpResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmpResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdClick", wireType)
			}
			m.AdClick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdClick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdComplete", wireType)
			}
			m.AdComplete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdComplete |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdDisplay", wireType)
			}
			m.AdDisplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdDisplay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdCtrDev", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AdCtrDev = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Register = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreTotal", wireType)
			}
			m.ScoreTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackType", wireType)
			}
			m.BlackType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlackType |= DmpResp_BlackType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skynet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skynet == nil {
				m.Skynet = &SkyNet{}
			}
			if err := m.Skynet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdSplashImp", wireType)
			}
			m.AdSplashImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdSplashImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdFeedImp", wireType)
			}
			m.AdFeedImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdFeedImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdBannerImp", wireType)
			}
			m.AdBannerImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdBannerImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdInterstitialImp", wireType)
			}
			m.AdInterstitialImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdInterstitialImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRewardedVideoImp", wireType)
			}
			m.AdRewardedVideoImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdRewardedVideoImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdFullScreenVideoImp", wireType)
			}
			m.AdFullScreenVideoImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdFullScreenVideoImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdDrawImp", wireType)
			}
			m.AdDrawImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdDrawImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdInterstitialFullScreenImp", wireType)
			}
			m.AdInterstitialFullScreenImp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdInterstitialFullScreenImp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkyNet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkyNet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkyNet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			m.Register = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Register |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			m.Login = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Login |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fission", wireType)
			}
			m.Fission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fission |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Browse", wireType)
			}
			m.Browse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Browse |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			m.Task = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Task |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			m.Withdraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withdraw |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= SkyNet_RiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDmp = fmt.Errorf("proto: unexpected end of group")
)
